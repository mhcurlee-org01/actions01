name: Fetch KV v1 secrets from Vault via OIDC

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  fetch-secrets:
    runs-on: [self-hosted]   # or your runner's labels, e.g., [self-hosted, linux, x64]
    steps:
      - uses: actions/checkout@v4

      - name: get vars
        run: |
          echo "VAULT_ADDR=$(cat myvars.yaml | ./tools/yaml2json | jq -r '.test.url')" >> $GITHUB_ENV
          echo "VAULT_ROLE=$(cat myvars.yaml | ./tools/yaml2json | jq -r '.test.rolename')" >> $GITHUB_ENV
          echo "VAULT_PATH=$(cat myvars.yaml | ./tools/yaml2json | jq -r '.test.path')" >> $GITHUB_ENV

      - name: concat test vars
        run: |    
          echo "TEST_CONCAT=${{ env.VAULT_ADDR }}_${{ env.VAULT_ROLE }}_${{ env.VAULT_PATH }}" >> $GITHUB_ENV
          echo "${{env.TEST_CONCAT}}"

      - name: Get Vault Secrets (KV v1)
        uses: hashicorp/vault-action@v3.4.0
        with:
          url: ${{ env.VAULT_ADDR }}
          method: jwt
          path: ${{ env.VAULT_PATH }}
          role: ${{ env.VAULT_ROLE }}
          exportEnv: true
          tlsSkipVerify: true
          secrets: |-
            secret/ci/app user | APP_USER ;
            secret/ci/app password | APP_PASSWORD ;

      - name: Use secrets
        run: |
          echo "User: $APP_USER" > creds.txt
          echo "Pass length: ${#APP_PASS}"
          # Don't print real secrets in production workflows
      
      - name: upload data
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: ./creds.txt


      - name: Validate secrets without printing
        run: |
          [[ -n "$APP_USER" ]] || { echo "APP_USER is empty"; exit 1; }
      
          if [[ "$APP_USER" == "helloworld" ]]; then
            echo "✅ Secrets are present and match expected values."
          else
            echo "❌ Secrets do NOT match expected values."; exit 1;
          fi

   