name: Fetch KV v1 secrets from Vault via OIDC

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
env:
  YAML_CONFIG: myvars.yaml
  ENV_NAME: test

jobs:
  parse_yaml:
    runs-on: [self-hosted]
    outputs:
      json:    ${{ steps.convert.outputs.json }}
      secrets: ${{ steps.convert.outputs.secrets }}
    steps:
      - uses: actions/checkout@v4

      - name: Install PyYAML
        run: python3 -m pip install --user pyyaml
        
      - name: Convert YAML to JSON + build secrets block
        id: convert
        env:
          YAML_CONFIG: ${{ env.YAML_CONFIG }}
          ENV_NAME: ${{ env.ENV_NAME }}
        run: python3 scripts/parse_env.py


  fetch-secrets:
    runs-on: [self-hosted]
    needs: parse_yaml
    steps:
      - uses: actions/checkout@v4

      - name: Get Vault Secrets (KV v1)
        uses: hashicorp/vault-action@v3.4.0
        with:
          url: ${{ fromJSON(needs.parse_yaml.outputs.json).url }}
          method: jwt
          role: ${{ fromJSON(needs.parse_yaml.outputs.json).role }}
          path: ${{ fromJSON(needs.parse_yaml.outputs.json).path }}
          exportEnv: true
          tlsSkipVerify: true
          secrets: | 
            ${{ needs.parse_yaml.outputs.secrets }}
            
          
      - name: Use secrets
        run: |
          echo "User: $APP_USER" > creds.txt
          echo "Pass length: ${#APP_PASS}"
          # Don't print real secrets in production workflows
      
      - name: upload data
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: ./creds.txt


      - name: Validate secrets without printing
        run: |
          [[ -n "$APP_USER" ]] || { echo "APP_USER is empty"; exit 1; }
      
          if [[ "$APP_USER" == "helloworld" ]]; then
            echo "✅ Secrets are present and match expected values."
          else
            echo "❌ Secrets do NOT match expected values."; exit 1;
          fi

   