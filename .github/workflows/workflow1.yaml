name: Fetch KV v1 secrets from Vault via OIDC

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
env:
  YAML_CONFIG: myvars.yaml

jobs:
  parse_yaml:
    runs-on: ubuntu-latest
    outputs:
      json: ${{ steps.convert.outputs.json }}
    steps:
      - uses: actions/checkout@v4

      - name: Convert YAML to JSON
        id: convert
        run: |
          python3 -c '
          import os, json, yaml
          
          file_path = os.environ["YAML_CONFIG"]
          with open(file_path) as f:
              data = yaml.safe_load(f)
          
          json_str = json.dumps(data)
          with open(os.environ["GITHUB_OUTPUT"], "a") as out:
              out.write(f"json={json_str}\n")'

      - name: Debug output value
        run: "echo Output was: ${{ steps.convert.outputs.json }} "


  fetch-secrets:
    runs-on: [self-hosted]
    needs: parse_yaml
    steps:
      - uses: actions/checkout@v4

      - name: Export JSON to GITHUB_ENV
        run: |
          echo 'JSON_CONFIG<<EOF' >> $GITHUB_ENV
          echo '${{ needs.parse_yaml.outputs.json }}' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          
      - name: Load Vault settings + build secrets list
        id: vars
        shell: bash
        run: |
          j="$(cat $JSON_CONFIG)"

          # Pull top-level settings
          echo "url=$(jq -r '.test.url' <<<"$j")" >> "$GITHUB_OUTPUT"
          echo "role=$(jq -r '.test.rolename' <<<"$j")" >> "$GITHUB_OUTPUT"
          echo "auth_path=$(jq -r '.test.path' <<<"$j")" >> "$GITHUB_OUTPUT"

          # Build the multi-line 'secrets' string for vault-action:
          #   secret/path key | ENV_NAME ;
          jq -r '
            .test.secrets
            | map("\(.path) \(.key) | \(.env_name) ;")
            | join("\n")
          ' <<<"$j" > /tmp/secrets.txt

          {
            echo "secrets<<EOF"
            cat /tmp/secrets.txt
            echo "EOF"
          } >> "$GITHUB_OUTPUT"


      - name: Get Vault Secrets (KV v1)
        uses: hashicorp/vault-action@v3.4.0
        with:
          url: ${{ steps.vars.outputs.url }}
          method: jwt
          role: ${{ steps.vars.outputs.role }}
          path: ${{ steps.vars.outputs.path }}
          exportEnv: true
          tlsSkipVerify: true
          secrets: ${{ steps.vars.outputs.secrets }}
            
             


      - name: test env
        run: | 
          env

          
      - name: Use secrets
        run: |
          echo "User: $APP_USER" > creds.txt
          echo "Pass length: ${#APP_PASS}"
          # Don't print real secrets in production workflows
      
      - name: upload data
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: ./creds.txt


      - name: Validate secrets without printing
        run: |
          [[ -n "$APP_USER" ]] || { echo "APP_USER is empty"; exit 1; }
      
          if [[ "$APP_USER" == "helloworld" ]]; then
            echo "✅ Secrets are present and match expected values."
          else
            echo "❌ Secrets do NOT match expected values."; exit 1;
          fi

   