name: Fetch KV v1 secrets from Vault via OIDC

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  fetch-secrets:
    runs-on: [self-hosted]   # or your runner's labels, e.g., [self-hosted, linux, x64]
    steps:
      - uses: actions/checkout@v4

      - name: Get Vault Secrets (KV v1)
        uses: hashicorp/vault-action@v3
        with:
          url: http://192.168.5.17:8200
          method: jwt
          path: jwt                 # auth mount path (auth/jwt)
          role: github-actions      # must match the role you created
          #audience: https://github.com/mhcurlee-org01          # must match bound_audiences
          exportEnv: true
          tlsSkipVerify: true       # dev only; prefer TLS + CA in real setups
          secrets: |-
            secret/ci/app user | APP_USER

      - name: Use secrets
        run: |
          echo "User: $APP_USER"
          echo "Pass length: ${#APP_PASS}"
          # Don't print real secrets in production workflows

      # Print raw (UNMASKED)
      - name: Echo raw (UNSAFE - prints secrets)
        run: |
          echo "APP_USER = '${APP_USER}'"
          echo "APP_PASS = '${APP_PASS}'"
          
       # so GH doesn't recognize it as a secret pattern.
      - name: Echo via copy (bypass mask)
        run: |
          UNMASK_USER="${APP_USER}"
          UNMASK_PASS="${APP_PASS}"
          echo "UNMASK_USER = '${UNMASK_USER}'"
          echo "UNMASK_PASS = '${UNMASK_PASS}'"

      # Safer debugging: show encodings/lengths instead of cleartext
      - name: Echo encoded / length
        run: |
          echo "USER_b64=$(printf '%s' "$APP_USER" | base64)"
          echo "PASS_len=${#APP_PASS}"
          echo "PASS_hex=$(printf '%s' "$APP_PASS" | xxd -p)"